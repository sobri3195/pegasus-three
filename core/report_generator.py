"""
Report Generator Module - Generate reports in various formats
"""

import json
from datetime import datetime
from pathlib import Path

class ReportGenerator:
    def __init__(self, config):
        self.config = config
        
    def generate(self, data, output_file, format='html'):
        generators = {
            'html': self.generate_html,
            'json': self.generate_json,
            'pdf': self.generate_pdf,
            'txt': self.generate_txt
        }
        
        generator = generators.get(format, self.generate_json)
        return generator(data, output_file)
    
    def generate_html(self, data, output_file):
        html_content = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pegasus OSINT Report</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }}
        h1 {{
            color: #2c3e50;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
        }}
        h2 {{
            color: #34495e;
            margin-top: 30px;
            border-left: 4px solid #3498db;
            padding-left: 10px;
        }}
        h3 {{
            color: #7f8c8d;
        }}
        .section {{
            margin-bottom: 30px;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 5px;
        }}
        .data-item {{
            margin: 10px 0;
            padding: 10px;
            background-color: white;
            border-left: 3px solid #3498db;
        }}
        .label {{
            font-weight: bold;
            color: #2c3e50;
        }}
        .value {{
            color: #7f8c8d;
            margin-left: 10px;
        }}
        .timestamp {{
            color: #95a5a6;
            font-size: 0.9em;
        }}
        .risk-low {{ color: #27ae60; }}
        .risk-medium {{ color: #f39c12; }}
        .risk-high {{ color: #e74c3c; }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin: 15px 0;
        }}
        th, td {{
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }}
        th {{
            background-color: #3498db;
            color: white;
        }}
        tr:hover {{
            background-color: #f5f5f5;
        }}
        .footer {{
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #ddd;
            text-align: center;
            color: #7f8c8d;
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>ü¶Ö Pegasus OSINT Intelligence Report</h1>
        <p class="timestamp">Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        
        {self._generate_html_sections(data)}
        
        <div class="footer">
            <p>Generated by Pegasus Three OSINT Toolkit</p>
            <p><strong>‚ö†Ô∏è This report contains sensitive information. Handle with care.</strong></p>
        </div>
    </div>
</body>
</html>"""
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        return {'success': True, 'file': output_file, 'format': 'html'}
    
    def _generate_html_sections(self, data):
        sections = []
        
        for section_name, section_data in data.items():
            if isinstance(section_data, dict):
                section_html = f'<div class="section"><h2>{section_name.upper()}</h2>'
                section_html += self._dict_to_html(section_data)
                section_html += '</div>'
                sections.append(section_html)
        
        return '\n'.join(sections)
    
    def _dict_to_html(self, data, level=0):
        html = ''
        
        for key, value in data.items():
            if isinstance(value, dict):
                html += f'<div class="data-item"><span class="label">{key}:</span>'
                html += self._dict_to_html(value, level + 1)
                html += '</div>'
            elif isinstance(value, list):
                html += f'<div class="data-item"><span class="label">{key}:</span><ul>'
                for item in value:
                    if isinstance(item, dict):
                        html += '<li>' + self._dict_to_html(item, level + 1) + '</li>'
                    else:
                        html += f'<li>{item}</li>'
                html += '</ul></div>'
            else:
                html += f'<div class="data-item"><span class="label">{key}:</span><span class="value">{value}</span></div>'
        
        return html
    
    def generate_json(self, data, output_file):
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, default=str)
        
        return {'success': True, 'file': output_file, 'format': 'json'}
    
    def generate_pdf(self, data, output_file):
        try:
            from reportlab.lib.pagesizes import letter, A4
            from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
            from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
            from reportlab.lib import colors
            from reportlab.lib.units import inch
            
            doc = SimpleDocTemplate(output_file, pagesize=A4)
            story = []
            styles = getSampleStyleSheet()
            
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Heading1'],
                fontSize=24,
                textColor=colors.HexColor('#2c3e50'),
                spaceAfter=30,
            )
            
            title = Paragraph("Pegasus OSINT Intelligence Report", title_style)
            story.append(title)
            story.append(Spacer(1, 0.2 * inch))
            
            timestamp = Paragraph(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", styles['Normal'])
            story.append(timestamp)
            story.append(Spacer(1, 0.5 * inch))
            
            for section_name, section_data in data.items():
                section_title = Paragraph(section_name.upper(), styles['Heading2'])
                story.append(section_title)
                story.append(Spacer(1, 0.2 * inch))
                
                if isinstance(section_data, dict):
                    for key, value in section_data.items():
                        text = f"<b>{key}:</b> {str(value)}"
                        para = Paragraph(text, styles['Normal'])
                        story.append(para)
                        story.append(Spacer(1, 0.1 * inch))
                
                story.append(Spacer(1, 0.3 * inch))
            
            doc.build(story)
            
            return {'success': True, 'file': output_file, 'format': 'pdf'}
            
        except ImportError:
            return {'success': False, 'error': 'reportlab not installed', 'format': 'pdf'}
        except Exception as e:
            return {'success': False, 'error': str(e), 'format': 'pdf'}
    
    def generate_txt(self, data, output_file):
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("="*60 + "\n")
            f.write("PEGASUS OSINT INTELLIGENCE REPORT\n")
            f.write("="*60 + "\n\n")
            f.write(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            
            for section_name, section_data in data.items():
                f.write("\n" + "-"*60 + "\n")
                f.write(f"{section_name.upper()}\n")
                f.write("-"*60 + "\n\n")
                
                self._write_dict_to_txt(f, section_data)
        
        return {'success': True, 'file': output_file, 'format': 'txt'}
    
    def _write_dict_to_txt(self, file, data, indent=0):
        prefix = "  " * indent
        
        if isinstance(data, dict):
            for key, value in data.items():
                if isinstance(value, (dict, list)):
                    file.write(f"{prefix}{key}:\n")
                    self._write_dict_to_txt(file, value, indent + 1)
                else:
                    file.write(f"{prefix}{key}: {value}\n")
        elif isinstance(data, list):
            for item in data:
                if isinstance(item, (dict, list)):
                    self._write_dict_to_txt(file, item, indent)
                else:
                    file.write(f"{prefix}- {item}\n")
        else:
            file.write(f"{prefix}{data}\n")
